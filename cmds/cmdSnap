#!/bin/sh
#
#  Take pictures in different scenarios
#    - initial - Take pictures during initial deployment
#    - picture - Take a sequence of picture
#    - position - Take a picture and feed to star tracker
#
instdir=$(cd "$(dirname "$0")"; pwd)
myProgram=$0
. "${instdir}/log.sh"
log_init "$0"
    

logFile=${logFile-/tmp/snap.log}
storageRoot=${storageRoot-/sdcard}
backupRoot=${backupRoot-/data}

if [ ! -w "$storageRoot" ]; then
    log "[I] Using backup storage at $backupRoot"
    storageRoot="$backupRoot"
fi

adcsCoordinateDb=/data/adcs.dat

#
# download priorities by scenario
#

#
# The following variables are dynamically referred to with 
# the scenario variable
#

adcsCoordinatePriority=1

#
# Set the priority of each scenario smaller is higher
#
# shellcheck disable=SC2034
picturePriority=100
# shellcheck disable=SC2034
initialPriority=90
# shellcheck disable=SC2034
positionPriority=80

#
# Set the Group for each scenario
#
# shellcheck disable=SC2034
pictureGroup=10
# shellcheck disable=SC2034
initialGroup=9
# shellcheck disable=SC2034
positionGroup=8

#
# Indicate whether or not to automatically queue the image
# for each scenario
#
# shellcheck disable=SC2034
positionQueueImage="no"
# shellcheck disable=SC2034
initialQueueImage="yes"
# shellcheck disable=SC2034
pictureQueueImage="yes"


usage()
{
    echo "Snap [-i (initial) | -n {n} (n pics)| -p (position) -r {Hi|Med|Lo|Min] -d {delay} -c (clear init flag) -C {starImg}"
}

exitStatus=0

O=$(getopt -- hin:pr:cd:C: "$@") || exit 1
eval set -- "$O"

snapExe=${snapExe-"uvccapture"}
starTracker=${starTracker-"/usr/local/bin/solve-field --config /usr/local/astrometry/etc/astrometry.cfg --no-fits2fits --no-verify --no-plots"}
stdArgs="-M -j -A1"

resMin="-x320 -y240"

# shellcheck disable=SC2034
resLo="-x640 -y480"
# shellcheck disable=SC2034
resMed="-x1024 -y768"
# shellcheck disable=SC2034
resHi="-x2048 -y1536"

resArgs=$resStd

callSelfArg="-c$myProgram"

#
# If no command line flags, we are calling ourself with the name
# of the image (via uvccapture).
#
scenario="callself"
numPics=1

#
# store the original scenario here when calling self
#
origScenarioFile="/tmp/origScenario"

#
# hold the index of the current picture
#
pictureIndexFile="/data/picIndex.dat"

# only run initial scenario at deploy time
initialDeployFlag="/data/snapInit.flag"

while true ; do
    case $1 in 
        -h)
            usage
            exit 0
            ;;
        -i)
            scenario="initial"
            shift
            ;;
        -n)
            numPics="$2"
            shift 2
            ;;
        -p)
            scenario="position"
            shift
            ;;
        -d)
            delay="$2"
            shift 2
            ;;
        -r)
            res="$2"
            shift 2
            ;;
        -c)
            log "[I] Clearing $initialDeployFlag"
            rm -f "$initialDeployFlag"
            exit 0;
            shift
            ;;
        -C)
            # compute coordinates with the image file provided on command line
            scenario="computeCoordinates"
            starImg=$2
            shift 2
            ;;
        --)
            shift
            break;
            ;;
        *)
            log "[E] unknown arg:  $arg"
            exit 1
            ;;
    esac
done

#
# if no arguments, take a picture
#
if [ -z "$1" ] && [ $scenario = "callself" ]; then
    scenario="picture"
fi

#
# Run image capture based on the scenario
#
executeScenario()
{
    if [ "$scenario" = "picture" ] && [ -n "$numPics" ]; then
        pictureArg=" - Taking $numPics pictures"
    fi
    log "[I] Snapping $scenario $pictureArg"

    case $scenario in 
        "initial")
            # only run initial scenario once
            if [ -e "$initialDeployFlag" ]; then
                return
            fi
            # take pictures with 1 second delay between
            numPics=15
            delay=1
            resArgs=$resLo
            ;;
        "picture")
            resArgs=$resLo
            ;;
        "position")
            resArgs=$resMin
            ;;
        "*")
            log "[E] Unknown scenario $scenario"
            exit 1
            ;;
    esac

    # allow overridding the default resolution
    if [ -n "$res" ]; then
        
        # shellcheck disable=SC2116
        newResArgs=$(eval echo \$res"${res}")
        # only assign resArgs if newRegArgs is valid
        if [ -n "$newResArgs" ]; then
            resArgs=$newResArgs
        else
            log "[W] Invalid res:  $res.  Using preset resolutions"
        fi
    fi

    echo "$scenario">"$origScenarioFile"

    if [ -n "$delay" ]; then
        delayArg="-D$delay"
    fi

    if [ -n "$numPics" ]; then
        numArg="-n$numPics"
    fi

    maxRetries=7;
    sleepTime=1;
    retryCount=0
    while true; do
        if [ $retryCount -gt $maxRetries ]; then
            break;
        fi
        # we want word splitting here
        # shellcheck disable=SC2086
        "$snapExe" $stdArgs $resArgs $delayArg $numArg $callSelfArg
        snapStatus=$?
        if [ $snapStatus -eq 0 ]; then
            break;
        else
            log "[E] Status $? executing $snapExe"
        fi
        sleep $sleepTime;
        # exponential backoff
        sleepTime=$((sleepTime*2))
        retryCount=$((retryCount+1))
    done
}

setPicIndex()
{
    if [ -e $pictureIndexFile ]; then
        picIndex=$(cat $pictureIndexFile)
    else
        picIndex=0
    fi
    #
    # increment the index and store it
    #
    picIndex=$((picIndex+1))
    echo "$picIndex" > $pictureIndexFile
}

#
# Clean up temporary files we created
#
cleanup()
{
    rm -f $origScenarioFile 
}

#
# Determine the celestial coordinates where we are
#
computeCoordinates()
{
    imagePath="$1"
    #
    # Run star tracker.
    #
    imageName=$(basename "$imagePath")
    rootName="${imagePath%.*}"
    baseName=$(basename "$rootName")

    #
    # cpulimit doesn't work in astrometry, so use shell job management commands
    # instead.
    #
    ${starTracker} "$imagePath" &
    starTrackerPid=$!

    ( sleep 180; if kill -0 "${starTrackerPid}"; then kill "$starTrackerPid"; killall astrometry-engine; fi)&
    killerPid=$!
    
    wait "$starTrackerPid"

    if kill -0 "$killerPid"; then kill "$killerPid"; fi

    if [ $? -ne 0 ]; then
        log "[E] Non-zero status executing solve-field"
    fi
    if [ -e "${rootName}.solved" ]; then
        if [ ! -e "$adcsCoordinateDb" ]; then
            echo "#timestamp imgFile ra dec orientation fieldw fieldh">$adcsCoordinateDb
            dlq-add -g "$positionGroup"  -p "$adcsCoordinatePriority" "$adcsCoordinateDb"
        fi
        # extract coordinates and save the image, otherwise discard
        dlq-add -g "$positionGroup"  -p "$positionPriority" "$imagePath"
        wcsFile="${rootName}.wcs"
        # shellcheck disable=SC2046
        eval $(wcsinfo "$wcsFile"|awk '/ra_center |dec_center |orientation |fieldw |fieldh /{printf "%s=%f ",$1,$2}') 
        echo "$timestamp $imageName $ra_center $dec_center $orientation $fieldw $fieldh" >> $adcsCoordinateDb
        # shellcheck disable=SC2046
        find $(dirname "$imagePath") -name "${baseName}*" ! -name "$imageName" -type f -exec rm -f {} +  
    elif [ -n "$rootName" ]; then
        rm "${rootName}"*
    fi
}
#
# rename picture and then perform further processing if necessary
#
processPicture()
{
    picName=$1
    origScenario=$(cat $origScenarioFile)
    extension=${1##*.}
    
    if [ -z "$origScenario" ]; then
        log "[E] No original scenario found"
        return 1
    fi

    setPicIndex

    #
    # Generate image name with picture index, date and scenario
    #
    timestamp="$(date +%Y%m%d_%H%M%S)"
    storedPictureName=$(printf "%04d-%s-%s.%s" "$picIndex" "$timestamp" "${origScenario}" "$extension")

    storageDir="${storageRoot}/$origScenario";
    mkdir -p "$storageDir"
    storagePath="${storageDir}/$storedPictureName"
    log "[I] Saving $storagePath"
    mv "$picName" "$storagePath"
    
    # register for offload
    group=$(eval echo \$"${origScenario}"Group)
    priority=$(eval echo \$"${origScenario}"Priority)
    queueImage=$(eval echo \$"${origScenario}"QueueImage)
    if [ "$queueImage" = "yes" ]; then
        dlq-add -g "$group"  -p "$priority" "$storagePath"
    fi
    case $origScenario in
        "position")
            computeCoordinates "$storagePath"
            ;;
        "initial")
            # create initialDeployFlag to prevent initial scenario
            # from executing again
            touch $initialDeployFlag
            ;;
    esac

}

if [ "$scenario" = "callself" ]; then
    processPicture "$1"
    exitStatus=$?
    log "[I] Done processing picture"
elif [ "$scenario" = "computeCoordinates" ]; then
    timestamp="$(date +%Y%m%d_%H%M%S -r "$starImg")"
    computeCoordinates "$starImg"
    exitStatus=$?
else
    executeScenario
    exitStatus=$?
fi

if [ $exitStatus -ne 0 ]; then
  log "[E] Snap status $exitStatus"
else 
  log "$0 Snap success"
fi

exit "$exitStatus"
