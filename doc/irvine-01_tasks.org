#+TITLE: Irvine-01 Software Tasks
#+AUTHOR: Maurice Ling
#+DATE: <2016-10-30 Sun>
#+DISABLE_PLAIN_FOOTNOTES: No footnotes
# This file created and edited with org-mode in emacs, but you can use any
# text editor to edit.
* Development Environment [3/3]
  - [X] VPN Access
  - [X] Polysat binary access
  - [X] Github project setup [5/5]
    - [X] irvine-01-sw
    - [X] irvine-01-cfg
    - [X] toolchain
    - [X] kernel
    - [X] buildroot
  - [ ] Software development process
* Descoped tasks
  These tasks have been descoped but could be added if we have time
  - [ ] GPS clock sync
  
* General System [3/4]
  - [X] Change root password
  - [X] authorized_keys configuration
  - [-] Hardware watchdog [1/2]
    - [X] Board Configuration for 1 Day 12 hours 8 min
      Short R120, 10KOhm on R2
    - [ ] Hardware watchdog "clear" command
  - [X] Store telemetry
* Initial Deployment [0/3]
  Initial deployment happens once the satellite launches from the P-Pod.  This
  occurs once in the CubeSat lifecycle. 
  - [ ] Configuration [0/1]
    - [ ] Antenna Deployment - This should occur first
      - Determine time required for Antenna Release
    - [ ] Satcomm squelch/inhibit (T+45 min)
      - Once Satcomm inhibit is disabled, beacon will transmit
  - [ ] Initial deployment script [0/4] 
    The integration point for initial deployment subtasks.  
    1. [ ] Detect initial deployment condition via init deployment flag
    2. [ ] Set init deployment flag in persistent location (/data)
    3. [ ] Run deployment functions/scripts from a directory
    4. [ ] Log deployment status
  - [ ] Initial Deployment Components
    - [ ] Initial Pictures (@T+0 min)
    - [ ] Automatic DSA Deployment (@T+30 min)
* Bootup scripts [2/2]
  - [X] C-Card initialization
  - [X] Payload Power On [1/1]
    - [X] 3V3_PL_Enable (GPIO 103)
* I2C Expander TCA9554A [2/3]
** Kernel Driver (descoped)
  - [X] Add Driver to kernel
  - [X] Driver setup module
  - [-] Testing
    - Encountered issues with module version with tca9554 support
    - [ ] i2cdetect -l 1 shows 0x38 used by kernel (shows UU stead of 38))
      - Currently need to call i2cget and reload pcf857x module
      - Setting value fails
    - [ ] gpio 300-302 come up Low
    - [ ] gpio 296-299, 303 come up High
    - [ ] Can set gpio's 300-303
** I2C Controller [1/2]
   - [-] ccardctl server [1/2]
     - [X] DSA Deploy/Release
       - DSA1 is on P1, DSA2 is on P0 (change from original design)
     - [ ] Software Timer
       - In testing, hardware timer triggered by P7 does not take effect
         Maximum duration is 20 seconds.  Test exceeded 44 sec
         and could have damaged the board.
       - DSA Sensing GPIO's DSA1 [0(PA26), 1(PA27)], DSA2[2(PA28), 4(PA30)] correspond to linux kernel mapped
         gpio's [58, 59] and [60, 62].
         - Part of Linux board initialization for polysat board.  GPIO's start
           at 32 with Block A starting at 32, B at 64, and C at 96, etc.
           So PA26 = GPIO 32+26=58, etc
       - Use DSA Sensing GPIO's to turn off Deploy/Release
   - [X] ccardcmd command client
** Testing [0/0]
   - [ ] DSA Deploy
   - [ ] DSA Release
** Testing Magetorquer [0/0]
   - [ ] Measure fields
* DSA Deployment [0/2]
  Create dsa_deployer utility script to initiate DSA release and deployment.
  | Operation       | GPIO |
  |-----------------+------|
  | DSA1_RLS_B      |  296 |
  | DSA1_DPLY_B     |  297 |
  | DSA2_RLS_B      |  298 |
  | DSA2_DPLY_B     |  299 |
  | DSA_EN_BAR      |  303 |
  | Deploy Sense 1A |    0 |
  | Deploy Sense 1B |    1 |
  | Deploy Sense 2A |    2 |
  | Deploy Sense 2B |    4 |
  |-----------------+------|
  Read/write the specified GPIOs.  Here's a [[http://falsinsoft.blogspot.com/2012/11/access-gpio-from-linux-user-space.html][Tutorial about how to read/write 
  GPIO's from user space]]. 
  - [ ] DSA Deployment Utility script [0/5]
    For each of the following operations, you need to set the DSA_EN_BAR GPIO
    timer.
    - [ ] Automatic initial deployment
    - [ ] Release DSA1
    - [ ] Release DSA2
    - [ ] Deploy DSA1
    - [ ] Deploy DSA2
  - [ ] Monitor Deployment Sensors
    Use the Deploy Sense GPIOs to provide the status of deployment 
    When the DSA's are deployed, the GPIO should be 0.
    Structure for status should contain the status of the four deployment sensors
* Camera Control [0/4]
  - [ ] Take Pictures Immediately after deployment
  - [ ] Targeting interface
  - [ ] Thumbnail generation
  - [ ] Picture window trigger
    - take pictures every 3-4 seconds within a time/target window
* ADCS
** ADCS Scenarios [0/5]
  - [ ] Detumbling
    - http://digitalcommons.calpoly.edu/cgi/viewcontent.cgi?article=1022&context=aerosp
    - https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20140016484.pdf
    - adcs_manager.c (attitude_control) from upsat:  https://github.com/librespacefoundation/upsat-adcs-software/blob/master/adcs/Src/adcs_manager.c
  - [ ] Object Targeting/Camera Trigger
  - [ ] De-orbiting
  - [ ] Attitude Determination (see 
  - [-] Star Tracking [3/5]
    - [X] astrometry software evaluation
    - [X] cross compile astrometry for arm
    - [X] buildroot/fsw_image integration
      - solve-field.sh wrapper for processing
    - [ ] Integrate into ADCS/flight software
    - [ ] Remote Command support
** Devices [0/6]
  - [-] Accelerometer [2/3]
    - [X] Driver 
      - adcs-sensors
    - [X] Interface (adcs-sensors-util)
    - [ ] Test/calibration
  - [-] Magnetometer [2/3]
    - [X] Driver
      - adcs-sensors
    - [X] Interface (adcs-sensors-util)
    - [ ] Test
  - [-] Gyro [2/3]
    - [X] Driver
      - adcs-sensors (adcs-sensors-util)
    - [X] Interface
    - [ ] Test
  - [ ] Magnetorquer [0/3]
    - [ ] Driver
    - [ ] Interface
    - [ ] Test
  - [-] GPS Interface [0/6]
    - [ ] OEM615V Device Configuration/Communication Test via Serial connection
      - http://www.novatel.com/assets/Documents/Manuals/om-20000128.pdf
      - Pg 121 has a diagram of the pin-outs (2x10, 2mm pitch header)
        - Pin 1 - 6-12 VDC for Antenna output
        - Pin 2 - 3.3 V Supply
        - Pin 10 - Gnd
        - Pins 11/12/13 - Com 1 TXD1/RXD/GND
        - Pins 14/15/16 - Com 2 TXD/RXD/GND
        - Pin 17 - PV Active high output
        - Pin 18 - Gnd
        - 19 - PPS for GPS time synchronization
      - You need two power supplies, one 6-12 VDC and one 3.3 V.
      - Connect COM1 pins to RS232 DB-9 serial port connector of proper
        gender to connect to the serial cable on the gateway.  
        (See http://www.db9-pinout.com/). 
      - Loopback the handshake lines
        - Connect pins 1, 6, and 4 together
        - Connect pins 7 and 8 together
      - See Pages 39-40 regarding connecting the comm ports to RS-232
      - See Pages 52, 53 regarding Serial port communication setup.
      - Configure, retrieve logs, and verify that PV 
        gets set high when a valid signal is detected
      - Validate that the GPS coordinates are accurate
    - [-] Serial Test interface [1/2]
      - [X] Build Cable
      - [ ] Verify functionality via serial commands
    - [ ] Cable Interface with C Card/Intrepid
    - [ ] Driver
    - [ ] GPS Data Processor/Interface
      - Retrieve GPS coordinate information
      - Current Date/Time
      - PV (This should be GPIO 22)
    - [ ] Integration Test
  - [-] Thruster [1/3]
    - [X] Test SPI communications via Host Adapter [1/2]
      - [X] Build EDU Cable
      - [ ] SPII interface verification
    - [ ] Cable Interface with C-Card (cable)
    - [ ] Driver - Thruster control via Intrepid SPI bus
      [ ] Integration Test
* Comms [4/5]
  - [X] UHF Radio [2/2] - *Make sure antenna is always connected when powering*
    - [X] Integration with Intrepid Card
    - [X] SDR/Comms Bench Testing
  - [X] Satcomm Configuration (satcomm.cfg)
    - https://asof.atl.calpoly.edu/trac/polysat_documentation/wiki/SatcommConfigurationChecklist
    - IP Address of Satellites (SAT_IP) - Confirm with John
      - 129.65.147.53 (flight unit)  
      - 129.65.147.55 (engineering unit)
  - [X] Add Satcomm process to inittab 
  - [-] Beacon [2/4]
    - Cal Poly instructions (summarized below):  https://asof.atl.calpoly.edu/trac/polysat_documentation/wiki/Beaconing
    - [X] Beacon process ([[https://github.com/irvinecubesat/irvine-01-sw/blob/master/beacon/beacon.c][beacon.c]]) 
    - [X] Broadcast beacon to 224.0.0.1 port 2
    - [ ] Beacon contents [0/2]
      - [ ] Identifier/magic number
      - [ ] Health/Telemetry Information
        - [ ] GPS Coordinates (when available, if valid)
        - [ ] Attitude (when available, if valid)
        - [ ] Gyro telemetry
        - [ ] Magnetometer
        - [ ] Accelerometer
        - [ ] System Time
        - [ ] Uptime
        - [ ] LDC - Long Duration Counter for hardware watchdog
      - Notes
        - Beacon contents are limited to 227 bytes.
        - Use packed binary structure in network order.
        - The structure takes the form of:
      #+BEGIN_SRC c-mode
      struct {
      uint16_t id; 
      uint8_t gyro[3];
      (fill in the data)...
      } __attribute__((packed));
      #+END_SRC
        - Use network order (convert any multi-byte value using the htonl function)
        - Reduce the resolution (round them down) to save on bytes
      - If values are not valid, then they should be set to 0 (or a known invalid value)
  - [X] Remote Command execution framework
    - Framework that executes commands on the board and provides return status and output.
    - Commands [2/2]:
      - [X] Test
      - [X] Chmod
      
* Ground Station [1/5]
  - [ ] Beacon Decoder
  - [ ] Beacon listener
  - [ ] Data Offload Controller (arsftp)
  - [X] Send commands via UDP to Spacecraft
    - Need to be less than 256 bytes (227 - UDP header)
  - [X] Ground station clock sync
  - [ ] Command and Control
    - [ ] Health Monitoring/Reporting
    - [ ] DSA Monitor/Control
    - [ ] Data Offload Initiation
    - [ ] Data Archiving
